---
import type { EventItem } from "../data/cms";

const { event } = Astro.props as { event: EventItem };
const hasDate = Boolean(event.date);
const dateObj = hasDate ? new Date(event.date + "T12:00:00") : null;
const dateFormatter = new Intl.DateTimeFormat("de-DE", { weekday: "long", day: "2-digit", month: "long", year: "numeric" });

const pad = (num: number) => String(num).padStart(2, "0");

const parseTimeValue = (value?: string) => {
  if (!value) return null;
  const match = value.trim().match(/^([01]?\d|2[0-3]):([0-5]\d)$/);
  if (!match) return null;
  const hours = Number(match[1]);
  const minutes = Number(match[2]);
  return Number.isNaN(hours) || Number.isNaN(minutes) ? null : { hours, minutes };
};

const formatTimeLabel = (time: { hours: number; minutes: number }) => `${pad(time.hours)}:${pad(time.minutes)}`;

const startTimeValue = parseTimeValue(event.startTime);
const endTimeValue = parseTimeValue(event.endTime);

let displayTime = "";
let calendarTimeLabel = "";

if (startTimeValue && endTimeValue) {
  const rangeLabel = `${formatTimeLabel(startTimeValue)} – ${formatTimeLabel(endTimeValue)}`;
  displayTime = rangeLabel;
  calendarTimeLabel = `${rangeLabel} Uhr`;
} else if (startTimeValue) {
  displayTime = `ab ${formatTimeLabel(startTimeValue)}`;
  calendarTimeLabel = `${formatTimeLabel(startTimeValue)} Uhr`;
} else if (endTimeValue) {
  displayTime = `bis ${formatTimeLabel(endTimeValue)}`;
  calendarTimeLabel = `${formatTimeLabel(endTimeValue)} Uhr`;
}

const addressLineOne = event.streetAddress?.trim() ?? "";
const addressLineTwo = [event.postalCode, event.city].filter(Boolean).join(" ");

const locationHeadline = event.location ?? addressLineOne ?? addressLineTwo ?? "Ort wird noch bekanntgegeben";
const secondaryAddressLines = [
  event.location ? addressLineOne : undefined,
  addressLineTwo
].filter((line): line is string => Boolean(line) && line !== locationHeadline);
const [secondaryLineOne, secondaryLineTwo] = secondaryAddressLines;

const calendarLocationParts = [
  event.location,
  event.streetAddress,
  addressLineTwo
].filter((part) => part && part.length > 0);

const calendarLocation = calendarLocationParts.join(", ");

const formatDateForICS = (date: Date) => `${date.getUTCFullYear()}${pad(date.getUTCMonth() + 1)}${pad(date.getUTCDate())}`;
const formatDateTimeForICS = (date: Date) => date.toISOString().replace(/[-:]/g, "").split(".")[0] + "Z";
const escapeICS = (text: string) =>
  text.replace(/\\/g, "\\\\").replace(/\n/g, "\\n").replace(/\r/g, "").replace(/,/g, "\\,").replace(/;/g, "\\;");

let calendarDownload: { icsHref: string; gcalHref: string; outlookHref: string } | undefined;
let eventStart: Date | null = null;
let eventEnd: Date | null = null;
const formattedDate = hasDate && dateObj ? dateFormatter.format(dateObj) : "";
const icsFileName = `repair-cafe-${event.date ?? "termin"}.ics`;

if (event.date) {
  const baseDate = new Date(`${event.date}T00:00:00`);
  let isAllDay = true;
  let startUTC = "";
  let endUTC = "";
  let startDateValue = "";
  let endDateValue = "";

  if (startTimeValue) {
    const start = new Date(baseDate);
    start.setHours(startTimeValue.hours, startTimeValue.minutes, 0, 0);

    const end = new Date(baseDate);
    if (endTimeValue) {
      end.setHours(endTimeValue.hours, endTimeValue.minutes, 0, 0);
      if (end <= start) {
        end.setHours(end.getHours() + 1);
      }
    } else {
      end.setHours(startTimeValue.hours + 2, startTimeValue.minutes, 0, 0);
    }

    startUTC = formatDateTimeForICS(start);
    endUTC = formatDateTimeForICS(end);
    isAllDay = false;
    eventStart = start;
    eventEnd = end;
  } else {
    const start = new Date(baseDate);
    const end = new Date(baseDate);
    end.setDate(end.getDate() + 1);
    startDateValue = formatDateForICS(start);
    endDateValue = formatDateForICS(end);
    eventStart = start;
    eventEnd = end;
  }

  const summary = escapeICS(event.title ?? "Repair Café Leonberg Termin");
  const description = escapeICS("Repair Café Leonberg – gemeinsam reparieren, Ressourcen schonen.");

  const icsLines = [
    "BEGIN:VCALENDAR",
    "VERSION:2.0",
    "PRODID:-//Repair Café Leonberg//DE",
    "CALSCALE:GREGORIAN",
    "BEGIN:VEVENT",
    `UID:${escapeICS(`${event._id}@repaircafe-leonberg.de`)}`,
    `DTSTAMP:${formatDateTimeForICS(new Date())}`
  ];

  if (isAllDay) {
    icsLines.push(`DTSTART;VALUE=DATE:${startDateValue}`);
    icsLines.push(`DTEND;VALUE=DATE:${endDateValue}`);
  } else {
    icsLines.push(`DTSTART:${startUTC}`);
    icsLines.push(`DTEND:${endUTC}`);
  }

  icsLines.push(`SUMMARY:${summary}`);
  if (calendarLocation) {
    icsLines.push(`LOCATION:${escapeICS(calendarLocation)}`);
  }
  icsLines.push(`DESCRIPTION:${description}`);
  icsLines.push("END:VEVENT", "END:VCALENDAR");

  const icsHref = `data:text/calendar;charset=utf-8,${encodeURIComponent(icsLines.join("\r\n"))}`;

  let gcalDates = "";
  if (isAllDay) {
    gcalDates = `${startDateValue}/${endDateValue}`;
  } else {
    gcalDates = `${startUTC}/${endUTC}`;
  }

  const gcalParams = new URLSearchParams({
    action: "TEMPLATE",
    text: event.title ?? "Repair Café Leonberg Termin",
    dates: gcalDates,
    details: "Repair Café Leonberg – gemeinsam reparieren, Ressourcen schonen.",
    location: calendarLocation,
    ctz: "Europe/Berlin"
  });

  const gcalHref = `https://calendar.google.com/calendar/render?${gcalParams.toString()}`;

  const outlookParams = new URLSearchParams({
    path: "/calendar/action/compose",
    rru: "addevent",
    subject: event.title ?? "Repair Café Leonberg Termin",
    body: "Repair Café Leonberg – gemeinsam reparieren, Ressourcen schonen.",
    location: calendarLocation
  });

  if (eventStart) {
    outlookParams.set("startdt", eventStart.toISOString());
  }
  if (eventEnd) {
    outlookParams.set("enddt", eventEnd.toISOString());
  }

  const outlookHref = `https://outlook.live.com/calendar/0/deeplink/compose?${outlookParams.toString()}`;

  calendarDownload = { icsHref, gcalHref, outlookHref };
}
---

<article class="glass flex h-full flex-col overflow-hidden rounded-3xl border border-slate-200/80 bg-white/95 p-6 shadow transition duration-300 hover:-translate-y-1 hover:shadow-lg dark:border-slate-700/60 dark:bg-slate-900/80">
  <div class="flex flex-wrap items-center justify-between gap-3 text-sm text-slate-600 dark:text-slate-300">
    <span class="inline-flex items-center gap-2 rounded-full bg-brand-600/10 px-3 py-1 font-medium text-brand-700 dark:text-brand-300">
      <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M8 7V3m8 4V3M3 11h18M5 5h14a2 2 0 012 2v12a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2z"/></svg>
      {hasDate && dateObj ? dateFormatter.format(dateObj) : 'Datum folgt'}
    </span>
    {displayTime && (
      <span class="inline-flex items-center gap-2 rounded-full bg-white px-3 py-1 text-xs font-semibold uppercase tracking-[0.18em] text-slate-700 shadow-sm dark:bg-slate-800 dark:text-slate-200">
        <svg class="h-3.5 w-3.5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 6v6l3 2"/><circle cx="12" cy="12" r="9"/></svg>
        {displayTime}
      </span>
    )}
  </div>

  <h3 class="mt-4 font-display text-xl font-semibold text-slate-900 dark:text-white">{event.title}</h3>

  <div class="mt-3 flex items-start gap-3 rounded-2xl border border-slate-100 bg-slate-50 px-4 py-3 text-sm text-slate-600 dark:border-slate-700/60 dark:bg-slate-800/60 dark:text-slate-300">
    <svg class="mt-0.5 h-5 w-5 text-brand-600 dark:text-brand-300" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 21s-6-5.686-6-10a6 6 0 1112 0c0 4.314-6 10-6 10z"/><circle cx="12" cy="11" r="2"/></svg>
    <div>
      <p class="font-semibold text-slate-800 dark:text-white">{locationHeadline}</p>
      {secondaryLineOne && <p class="text-slate-500 dark:text-slate-200/80">{secondaryLineOne}</p>}
      {secondaryLineTwo && <p class="text-slate-500 dark:text-slate-200/80">{secondaryLineTwo}</p>}
    </div>
  </div>

  <div class="mt-auto pt-4 space-y-3">
    <span class="inline-flex items-center justify-center gap-2 rounded-full bg-slate-100 px-5 py-2.5 text-center text-sm font-medium text-slate-700 shadow-sm dark:bg-slate-800 dark:text-slate-200">
      <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 5v14"/><path d="M5 12h14"/></svg>
      Teilnahme ohne Anmeldung – kommen Sie einfach vorbei
    </span>

    {calendarDownload && (
      <div>
        <button
          type="button"
          class="button_mb-button__seg6h button_mb-button--primary__VTNYJ button_mb-button--inverse__UWXrU button_mb-button--medium__y9rSt button_mb-button--outline__8HZoJ button_mb-button--text__ni08S inline-flex w-full items-center justify-center gap-2 rounded-full bg-brand-600 px-5 py-2.5 text-sm font-semibold text-white shadow transition hover:-translate-y-0.5 hover:bg-brand-700 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-brand-500"
          data-calendar-button
          data-calendar-title={event.title ?? 'Repair Café Leonberg Termin'}
          data-calendar-date={formattedDate || undefined}
          data-calendar-time={calendarTimeLabel || undefined}
          data-calendar-location={calendarLocation || undefined}
          data-calendar-ics={calendarDownload.icsHref}
          data-calendar-ics-file={icsFileName}
          data-calendar-gcal={calendarDownload.gcalHref}
          data-calendar-outlook={calendarDownload.outlookHref}
          aria-haspopup="dialog"
          aria-expanded="false"
        >
          <svg class="h-4 w-4" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M12 5v14"/><path d="M5 12h14"/></svg>
          <span>Zum Kalender hinzufügen</span>
        </button>
      </div>
    )}
  </div>
</article>
