---
const links = [
  { href: '/', label: 'Start' },
  { href: '/was', label: 'Was' },
  { href: '/termine', label: 'Wann' },
  { href: '/wie', label: 'Wie' },
  { href: '/aktuelles', label: 'Aktuelles' },
  { href: '/impressionen', label: 'Impressionen' },
  { href: '/ueber-uns', label: 'Über uns' },
];
---

<header class="sticky top-0 z-50 w-full">
  <div class="relative">
    <div class="absolute inset-0 backdrop-blur supports-[backdrop-filter]:bg-white/60 dark:supports-[backdrop-filter]:bg-slate-900/50"></div>
    <nav class="relative mx-auto container flex items-center justify-between py-3">
      <a href="/" class="flex items-center gap-2 text-xl font-semibold">
        <img src="/logo.svg" alt="Repair Café Leonberg" class="h-8 w-8" />
        <span class="font-logo uppercase tracking-[0.08em]">Repair Café Leonberg</span>
      </a>
      <div class="hidden md:flex items-center gap-6">
        {links.map((l) => (
          <a href={l.href} class="text-sm font-medium text-slate-700 hover:text-slate-900 dark:text-slate-200 dark:hover:text-white">{l.label}</a>
        ))}
        <a href="#mitmachen" class="inline-flex items-center rounded-full bg-[#DD714D] px-4 py-2 text-sm font-semibold text-white shadow-sm transition hover:-translate-y-0.5 hover:bg-[#c35a39] focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500">Mitmachen</a>
      </div>

      <div class="md:hidden">
        <button
          id="mobile-menu-toggle"
          type="button"
          class="rounded-full p-2 hover:bg-slate-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 dark:hover:bg-slate-800"
          aria-label="Menü öffnen"
          aria-expanded="false"
          aria-controls="mobile-menu"
        >
          <svg class="h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M4 7h16M4 17h16" />
          </svg>
        </button>
      </div>
    </nav>
  </div>
  <div
    id="mobile-menu"
    data-state="closed"
    class="group fixed inset-0 z-50 hidden opacity-0 pointer-events-none transition duration-300 ease-out md:hidden data-[state=open]:pointer-events-auto data-[state=open]:opacity-100"
  >
    <div class="absolute inset-0 bg-slate-900/60 backdrop-blur-sm opacity-0 transition duration-300 ease-out group-data-[state=open]:opacity-100" data-menu-backdrop></div>
    <div class="relative z-10 mt-20 flex h-[calc(100%-5rem)] translate-y-4 flex-col justify-between px-5 pb-8 transition-transform duration-300 ease-out group-data-[state=open]:translate-y-0">
      <div class="glass rounded-3xl p-6 shadow-2xl">
        <div class="flex items-center justify-between">
          <a href="/" class="flex items-center gap-2 text-lg font-semibold text-slate-900 dark:text-white">
            <img src="/logo.svg" alt="Repair Café Leonberg" class="h-7 w-7" />
            <span class="font-logo uppercase tracking-[0.08em]">Repair Café Leonberg</span>
          </a>
          <button id="mobile-menu-close" type="button" class="rounded-full p-2 text-slate-500 hover:bg-slate-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-500 dark:text-slate-300 dark:hover:bg-slate-800" aria-label="Menü schließen">
            <svg class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M6 6l12 12M6 18L18 6"/></svg>
          </button>
        </div>
        <div class="mt-6 flex flex-col gap-4">
          {links.map((l) => (
            <a href={l.href} class="text-lg font-semibold text-slate-800 hover:text-brand-600 dark:text-slate-100 dark:hover:text-white">{l.label}</a>
          ))}
          <a href="#mitmachen" class="inline-flex items-center justify-center rounded-full bg-[#DD714D] px-5 py-3 text-sm font-semibold text-white shadow-sm transition hover:-translate-y-0.5 hover:bg-[#c35a39]">Mitmachen</a>
        </div>
      </div>
      <div class="flex flex-col items-center gap-3">
        <p class="text-center text-xs text-slate-500 dark:text-slate-400">Gemeinsam reparieren für eine nachhaltige Zukunft.</p>
      </div>
    </div>
  </div>
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const mobileToggle = document.getElementById('mobile-menu-toggle');
      const mobileClose = document.getElementById('mobile-menu-close');
      const mobileMenu = document.getElementById('mobile-menu');
      let closeAnimationHandler;

      function setMobileMenu(open) {
        if (!mobileMenu || !mobileToggle) return;
        if (open) {
          mobileMenu.classList.remove('hidden');
          requestAnimationFrame(() => {
            mobileMenu.setAttribute('data-state', 'open');
          });
          if (closeAnimationHandler) {
            mobileMenu.removeEventListener('transitionend', closeAnimationHandler);
            closeAnimationHandler = undefined;
          }
        } else {
          mobileMenu.setAttribute('data-state', 'closed');
          closeAnimationHandler = (event) => {
            if (event.target !== mobileMenu) return;
            mobileMenu.classList.add('hidden');
            mobileMenu.removeEventListener('transitionend', closeAnimationHandler);
            closeAnimationHandler = undefined;
          };
          mobileMenu.addEventListener('transitionend', closeAnimationHandler);
        }
        mobileToggle.setAttribute('aria-expanded', String(open));
        document.body.classList.toggle('overflow-hidden', open);
      }

      function toggleMobileMenu() {
        const isOpen = mobileMenu?.classList.contains('hidden') === false;
        setMobileMenu(!isOpen);
      }

      mobileToggle?.addEventListener('click', toggleMobileMenu);
      mobileClose?.addEventListener('click', () => setMobileMenu(false));
      mobileMenu?.addEventListener('click', (event) => {
        if (event.target === mobileMenu || event.target?.hasAttribute('data-menu-backdrop')) {
          setMobileMenu(false);
        }
      });
      window.addEventListener('keydown', (event) => {
        if (event.key === 'Escape') {
          setMobileMenu(false);
        }
      });
      mobileMenu?.querySelectorAll('a').forEach((link) => {
        link.addEventListener('click', () => setMobileMenu(false));
      });
    });
  </script>
</header>
