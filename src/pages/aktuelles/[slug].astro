---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Header from "../../components/Header.astro";
import Footer from "../../components/Footer.astro";
import CTA from "../../components/CTA.astro";
import { getPostBySlug } from "../../data/cms";
import { toHTML } from "@portabletext/to-html";

export const prerender = false;

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect('/aktuelles');
}

const post = await getPostBySlug(slug);

if (!post) {
  return new Response(null, { status: 404 });
}

const normaliseWhitespace = (value: string) => value.replace(/\s+/g, ' ').trim();

const bodyToPlainText = (body: any[] | undefined) => {
  if (!Array.isArray(body)) return '';
  return body
    .map((slice) => {
      if (slice?._type === 'block' && Array.isArray(slice.children)) {
        return slice.children.map((child: any) => child?.text ?? '').join('');
      }
      if (slice?._type === 'image' && typeof slice?.alt === 'string') {
        return slice.alt;
      }
      return '';
    })
    .join(' ')
    .replace(/\s+/g, ' ')
    .trim();
};

const plainBody = post.bodyPlain && post.bodyPlain.trim().length > 0 ? post.bodyPlain : bodyToPlainText(post.body);
const baseDescription = normaliseWhitespace(plainBody ?? '');
const metaDescription = baseDescription && baseDescription.length > 0 ? (baseDescription.length > 200 ? `${baseDescription.slice(0, 197)}…` : baseDescription) : '';

const publishedDate = post.publishedAt
  ? new Intl.DateTimeFormat('de-DE', {
      day: '2-digit',
      month: 'long',
      year: 'numeric'
    }).format(new Date(post.publishedAt))
  : null;

const escapeHtml = (input: string) =>
  input
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#039;');

const bodyHtml = post.body
  ? toHTML(post.body, {
      components: {
        types: {
          image: ({ value }) => {
            const url = value?.url;
            if (!url) return '';
            const alt = value?.alt ? escapeHtml(value.alt) : '';
            const caption = value?.caption ? `<figcaption class="mt-3 text-center text-sm text-slate-500">${escapeHtml(value.caption)}</figcaption>` : '';
            return `<figure class="mt-8 overflow-hidden rounded-3xl"><img src="${url}" alt="${alt}" loading="lazy" class="w-full object-cover" />${caption}</figure>`;
          }
        },
        marks: {
          link: ({ children, value }) => {
            const href = typeof value?.href === 'string' ? value.href : '#';
            const openInNewTab = Boolean(value?.openInNewTab);
            const target = openInNewTab ? '_blank' : '_self';
            const rel = openInNewTab ? 'noopener noreferrer' : 'noopener';
            const safeHref = escapeHtml(href);
            return `<a href="${safeHref}" target="${target}" rel="${rel}">${children}</a>`;
          }
        }
      }
    })
  : '';
---

<BaseLayout title={`${post.title} – Repair Café Leonberg`} description={metaDescription ?? ''}>
  <Header />

  <main class="bg-slate-100 py-12 md:py-16">
    <article class="container">
      <div class="mx-auto max-w-3xl">
        <span class="inline-flex items-center gap-2 rounded-full bg-white px-4 py-1 text-xs font-semibold uppercase tracking-[0.2em] text-slate-500">
          Aktuelles
        </span>
        <h1 class="mt-5 font-display text-4xl font-extrabold text-slate-900 md:text-5xl">{post.title}</h1>
        {publishedDate && (
          <p class="mt-3 text-sm text-slate-500">Veröffentlicht am {publishedDate}</p>
        )}

        {post.coverImage && (
          <figure class="mt-8 overflow-hidden rounded-3xl">
            <img src={post.coverImage} alt={post.title} class="w-full object-cover" loading="lazy" />
          </figure>
        )}

        {metaDescription && (
          <p class="mt-6 text-lg text-slate-700">{metaDescription}</p>
        )}

        <div class="prose prose-slate mt-8 max-w-none" set:html={bodyHtml}></div>
      </div>
    </article>
  </main>

  <CTA />
  <Footer />
</BaseLayout>
